# -*- mode:org; fill-column:79; -*-
#+title: CSV-SQLite3 Using Node
#+subtitle:Convert CSV files into data usable by SQLite3@@texinfo:@*@@
#+subtitle:{{{date}}} {{{version}}}
#+date:2019-07-08 22:40
#+macro: version Version 0.0.5

* Introduction
:PROPERTIES:
:unnumbered: t
:END:
US Bank has the facility to download bank records in CSV form.  This program is
designed to convert those downloaded CSV files into a form usable by SQLite,
and then to use SQLite to process the data.

{{{heading(Header Lines)}}}

The header lines are:

: "Date","Transaction","Name","Memo","Amount"

{{{heading(Data Columns)}}}

{{{subheading(Date)}}}

A sample date is:

: 1/4/2016

{{{subheading(Transaction)}}}

A =Transaction= is one of

- =DEBIT=
- =CREDIT=

{{{subheading(Name)}}}

A sample =name= entry is:

: DEBIT PURCHASE -VISA USPS PO BOXES 66800-3447779 DC

{{{subheading(Memo)}}}

A sample =memo= entry is:

: Download from usbank.com. USPS PO BOXES 66800-3447779 DC

{{{subheading(Amount)}}}

- -66.0000

* Create the Project
This project's dependencies are the following Node.js modules:

- ~command-line-args~
- ~command-line-usage~
- ~csv~
- ~sqlite3~

#+name:tangle-CSV-SQLite3-project
#+begin_src emacs-lisp :results output :exports results
(org-babel-tangle-file "CSV-SQLite3.org")
#+end_src

#+name:create-CSV-SQLite3-project
#+header: :exports results :results output
#+begin_src sh
yarn --yes init
yarn add command-line-args command-line-usage csv sqlite3
#+end_src

** Establish some Basic Dependencies
In addition to the foregoing dependencies, this project uses the following
Node.js built-in modules:

- ~fs~ :: File System

- ~util~ :: Utilities

#+name:csv-sqlite3-dependencies
#+header: :mkdirp yes
#+header: :comments both
#+begin_src js -n :tangle index.js
const fs = require('fs');
const util = require('util');
#+end_src

* Working with the Command Line
:PROPERTIES:
:header-args: :comments both
:END:
** Command Line Usage
#+cindex:command-line usage
#+cindex:usage
#+cindex:@command{command-line-usage}
This section generates a usage message activated by the =--help= option.

#+name:csv-sqlite3-usage
#+begin_src js
const cl_usage = require('command-line-usage');
const sections = [
    {
        header: 'CSV-SQLite',
        content: 'Processes raw usb csv files into a form usable by SQLite3'
    },
    {
        header: 'Options',
        optionList: option_defs,
    },
    {
        content: `Project directory: {underline ${process.env.WORKNODE}/CSV-SQLite3}`
    }
];
const usage = cl_usage(sections);
console.log(usage);
#+end_src

** Command Line Argument Processing
#+cindex:command-line arguments
#+cindex:arguments
#+cindex:@command{command-line-arguments}
#+cindex:@option{--help}
#+cindex:@option{--create}
#+cindex:@option{--delete}
Initially, the database should be creatable and deleteable.

: csvsqlite --help | -h

: csvsqlite --create=<db-name> | -c <db-name>

: csvsqlite --delete=<db-name> | -d <db-name>

#+name:csv-sqlite3-command-line-arg-processing
#+header: :noweb yes
#+begin_src js +n :tangle index.js
const cli_args = require('command-line-args');
const option_defs = [
    { name: 'help',   alias: 'h', type: Boolean, description: 'Prints this usage message.' },
    { name: 'attach', alias: 'a', type: String,  description: 'Attach to an existing or new database file.' },
    { name: 'delete', alias: 'd', type: String,  description: 'Delete an existing database file.' },
    { name: 'csv',    alias: 'c', type: String, multiple: true,  description: 'Process a CSV file [6815|6831] yyyy' },
];
const options = cli_args(option_defs);
console.log(options);

if (options.help) {
    <<csv-sqlite3-usage>>
    process.exit(0);
}
#+end_src

* Process CSV Files
:PROPERTIES:
:header-args: :comments both
:END:
CSV financial files are found in the directories =$WORKUSB_[6815|6831]/yyyy=,
where =yyyy= can be 2004--2019, and on.  Given =[6815|6831]= and a year
=[2004|2005...2019]=, the file path will be
=$WORKUSB_6815/YYYY/usb_6815--yyyy.csv=.

#+name:csv-sqlite3-process-csv-files
#+header: :noweb yes
#+begin_src js +n :tangle index.js
if (options.csv) {
    const acct = options.csv[0],
          year = options.csv[1];

    if (!process.env.WORKUSB) {
        console.error('You must assign a path to the shell variable WORKUSB');
        process.exit(1);
    }

    const acct_year_path = `${process.env.WORKUSB}/usb_${acct}/${year}`;
    const acct_year_csv_file = `usb_${acct}--${year}.csv`;
    const acct_year_csv_file_path = `${acct_year_path}/${acct_year_csv_file}`;
    if (!fs.existsSync(acct_year_csv_file_path) || !(fs.accessSync(acct_year_csv_file_path, fs.constants.R_OK) === undefined)) {
        console.error(`Cannot find or access the CSV file at '${acct_year_csv_file_path}'.`);
        process.exit(1);
    }
    console.log(`Successfully found the CSV file: '${acct_year_csv_file_path}'`);

    <<csv-sqlite3-csv-parse>>

    const csv_file_stream = fs.createReadStream(acct_year_csv_file_path, {encoding: 'utf8'});

    csv_file_stream.on('readable', function () {
        let record;
        while ((record = this.read())) {
            console.log(`readable record: ${record}`);
            parser.write(record);
        }
        parser.end();
    });

    csv_file_stream.on('error', function(err) {
        console.error(err.message);
    });

    csv_file_stream.on('end', function () {
        console.log('Reader finsihed reading data.');
    });
}
#+end_src

** Parse the Found CSV File
:PROPERTIES:
:header-args: :comments both
:END:
First, the date needs to be transformed into the form yyyy-mm-dd.

#+name:csv-sqlite3-csv-parse
#+header: :noweb yes
#+header: :comments link
#+begin_src js
const csv = require('csv');
const parser = csv.parse({columns: true});
const records = [];

<<csv-transformer-func>>

parser.on('readable', function() {
    console.log('Parser beginning to read records.');
    let record;
    while ((record = parser.read())) {
        console.log(`parser record: ${util.inspect(record)}`);
        transformer.write(record);
    }
    transformer.end();
});

parser.on('error', function(err) {
    console.error(err.message);
});

parser.on('end', function() {
    console.log('Parser finished reading records.');
});

parser.on('finish', function () {
    console.log('Parser finished writing records.');
});
#+end_src

** Transform Each CSV Record
:PROPERTIES:
:header-args: :comments both
:END:
This code implements the CSV.Transfor functionality.

#+name:csv-transformer-func
#+begin_src js
  const transformer = csv.transform(function(data) {return data});
  const output = [];

  var transform_function = function(record) {
      return record;
  }

  transformer.on('readable', function() {
      let record;
      while ((record = transformer.read())) {
          console.log(`Transformer record: ${util.inspect(record)}`);
          output.push(record);
      }
  });

  transformer.on('error', function(err) {
      console.error(err.message);
  });

  transformer.on('finish', function() {
      console.log('Transformer finished writing records.');
  });

  transformer.on('end', function() {
      console.log('Transformer done reading records.');
  });
#+end_src

* SQLite Tables
#+cindex:tables
The minimum SQLite tables that should be created are:

- business
- trust
- personal


More can be created as needed.

** SQLite Table Columns
#+cindex:columns
The columns that should be created for each of the tables are:

- =rowid= (implicit creation)
- =date= in the form of =yyyy-mm-dd=
- =type= containing either =CREDIT | DEBIT=
- =check= containing a check number, if present
- =payee=
- =category=
- =memo=
- =workcase= containing a related case number (=case= is apparently a reserved
  word and throws an error)
- =amount= in the form =\pm##,###.##=


| rowid       | date       | type   | check | payee    | category | memo | workcase | amount     |   |
|-------------+------------+--------+-------+----------+----------+------+----------+------------+---|
| primary key | yyyy-mm-dd | credit | ####  | text     | text     | text | integer  | \pm##,###.## |   |
| implicit    | not null   | debit  | null  | not null | null     | null | null     | not null   |   |
| creation    |            |        |       |          |          |      |          |            |   |
|-------------+------------+--------+-------+----------+----------+------+----------+------------+---|

* Attach To or Delete a Database
:PROPERTIES:
:header-args: :comments both
:END:
SQLite3 can have any number of databases.  Only one is initially attached, but
more can be attached subsequent to the first attachment.  If the database does
not exist, it will be created.  If the user requests that a database file be
deleted, it will be backed up first, then deleted.

The user can attach to a database file (either a specified file or the default
file, defined as ~$WORKFIN/workfin.db~), or delete a specified database file.
A deleted file is backed up to a backup directory that needs to be defined as a
shell environment variable: =WORKBAK=.

{{{heading(Verbose Mode)}}}

#+cindex:verbose mode
During development, call the ~verbose()~ method on the ~sqlite3~ object to
enable better stack traces.  In production, remove this call for improved
performance.

#+name:csv-sqlite3-create-database
#+begin_src js +n :tangle index.js

  if ( !process.env.WORKDB ) {
      console.error('You must define a shell variable named WORKFDB as a base directory for the database file.');
      process.exit(1);
  }

  const WORKDB = process.env.WORKDB; // base directory for db
  const DB_DEFAULT = 'workfin.sqlite';
  const db_file = options.attach ? options.attach :    // for attaching
                  options.delete ? options.delete :    // for deletion
                  DB_DEFAULT;  	       	         // use the default name
  const db_path = `${WORKDB}/${db_file}`;

  /*---DELETE--*/
  if (options.delete) {
      if (!process.env.WORKBAK) {
          console.error('You must define a shell variable named WORKBAK as a backup directory before deleting a database file.');
          process.exit(1);
      }
      const db_path_bak = `${process.env.WORKBAK}/${db_file}.${Date.now()}`;
      fs.renameSync(db_path, db_path_bak);
      console.error(`Successfully deleted ${db_path};\nThis file has been backed up to ${db_path_bak}`);
      process.exit(0);
  }

  /*--ATTACH--*/
  const sqlite3 = require('sqlite3').verbose();      // remove 'verbose' in production
  const db = new sqlite3.Database(db_path, (err) => {
      if (err)
          console.error(`Error opening database file ${db_path}: ${err.message})`);
      else
          console.log(`Successfully attached to database file ${db_path}`);
  });
#+end_src

* Create Tables

* Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Macro Definitions                                                :noexport:
#+macro: heading @@texinfo:@heading @@$1
#+macro: subheading @@texinfo:@subheading @@$1

* Export Settings                                                  :noexport:
#+texinfo_filename:csv-sqlite3.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+texinfo_dir_category:CSV
#+texinfo_dir_title:ConvertCSV (convertcsv)
#+texinfo_dir_desc:Convert USB CSV files to SQLite
#+texinfo_printed_title:ConvertCSV Using Node.js CSV-Parser

* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
